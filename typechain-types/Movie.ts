/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MovieInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "hasPurchasedMovie"
      | "movies"
      | "setTokenAddress"
      | "token"
      | "watchMovie"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "MoviePurchased"): EventFragment;

  encodeFunctionData(
    functionFragment: "hasPurchasedMovie",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "movies",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "watchMovie",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "hasPurchasedMovie",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "movies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "watchMovie", data: BytesLike): Result;
}

export namespace MoviePurchasedEvent {
  export type InputTuple = [buyer: AddressLike, movieId: BigNumberish];
  export type OutputTuple = [buyer: string, movieId: bigint];
  export interface OutputObject {
    buyer: string;
    movieId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Movie extends BaseContract {
  connect(runner?: ContractRunner | null): Movie;
  waitForDeployment(): Promise<this>;

  interface: MovieInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  hasPurchasedMovie: TypedContractMethod<
    [_user: AddressLike, _movieId: BigNumberish],
    [boolean],
    "view"
  >;

  movies: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  setTokenAddress: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  watchMovie: TypedContractMethod<
    [_movieId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "hasPurchasedMovie"
  ): TypedContractMethod<
    [_user: AddressLike, _movieId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "movies"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "setTokenAddress"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "watchMovie"
  ): TypedContractMethod<[_movieId: BigNumberish], [boolean], "nonpayable">;

  getEvent(
    key: "MoviePurchased"
  ): TypedContractEvent<
    MoviePurchasedEvent.InputTuple,
    MoviePurchasedEvent.OutputTuple,
    MoviePurchasedEvent.OutputObject
  >;

  filters: {
    "MoviePurchased(address,uint32)": TypedContractEvent<
      MoviePurchasedEvent.InputTuple,
      MoviePurchasedEvent.OutputTuple,
      MoviePurchasedEvent.OutputObject
    >;
    MoviePurchased: TypedContractEvent<
      MoviePurchasedEvent.InputTuple,
      MoviePurchasedEvent.OutputTuple,
      MoviePurchasedEvent.OutputObject
    >;
  };
}
